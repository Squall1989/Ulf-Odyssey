// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(22)
            {
                { typeof(global::Ulf.CreateBridgeStruct[]), 0 },
                { typeof(global::Ulf.CreateBuildStruct[]), 1 },
                { typeof(global::Ulf.CreatePlanetStruct[]), 2 },
                { typeof(global::Ulf.CreateUnitStruct[]), 3 },
                { typeof(global::Ulf.SnapUnitStruct[]), 4 },
                { typeof(global::ElementType), 5 },
                { typeof(global::MsgPck.IUnionMsg), 6 },
                { typeof(global::Ulf.INextAction), 7 },
                { typeof(global::MsgPck.ActionData), 8 },
                { typeof(global::MsgPck.PlayerData), 9 },
                { typeof(global::MsgPck.RequestPlayerSpawn), 10 },
                { typeof(global::MsgPck.SnapSceneStruct), 11 },
                { typeof(global::Ulf.CreateBridgeStruct), 12 },
                { typeof(global::Ulf.CreateBuildStruct), 13 },
                { typeof(global::Ulf.CreatePlanetStruct), 14 },
                { typeof(global::Ulf.CreateSceneStruct), 15 },
                { typeof(global::Ulf.CreateUnitStruct), 16 },
                { typeof(global::Ulf.MovementAction), 17 },
                { typeof(global::Ulf.SnapPlanetStruct), 18 },
                { typeof(global::Ulf.SnapPlayerStruct), 19 },
                { typeof(global::Ulf.SnapUnitStruct), 20 },
                { typeof(global::Ulf.StandAction), 21 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Ulf.CreateBridgeStruct>();
                case 1: return new global::MessagePack.Formatters.ArrayFormatter<global::Ulf.CreateBuildStruct>();
                case 2: return new global::MessagePack.Formatters.ArrayFormatter<global::Ulf.CreatePlanetStruct>();
                case 3: return new global::MessagePack.Formatters.ArrayFormatter<global::Ulf.CreateUnitStruct>();
                case 4: return new global::MessagePack.Formatters.ArrayFormatter<global::Ulf.SnapUnitStruct>();
                case 5: return new MessagePack.Formatters.ElementTypeFormatter();
                case 6: return new MessagePack.Formatters.MsgPck.IUnionMsgFormatter();
                case 7: return new MessagePack.Formatters.Ulf.INextActionFormatter();
                case 8: return new MessagePack.Formatters.MsgPck.ActionDataFormatter();
                case 9: return new MessagePack.Formatters.MsgPck.PlayerDataFormatter();
                case 10: return new MessagePack.Formatters.MsgPck.RequestPlayerSpawnFormatter();
                case 11: return new MessagePack.Formatters.MsgPck.SnapSceneStructFormatter();
                case 12: return new MessagePack.Formatters.Ulf.CreateBridgeStructFormatter();
                case 13: return new MessagePack.Formatters.Ulf.CreateBuildStructFormatter();
                case 14: return new MessagePack.Formatters.Ulf.CreatePlanetStructFormatter();
                case 15: return new MessagePack.Formatters.Ulf.CreateSceneStructFormatter();
                case 16: return new MessagePack.Formatters.Ulf.CreateUnitStructFormatter();
                case 17: return new MessagePack.Formatters.Ulf.MovementActionFormatter();
                case 18: return new MessagePack.Formatters.Ulf.SnapPlanetStructFormatter();
                case 19: return new MessagePack.Formatters.Ulf.SnapPlayerStructFormatter();
                case 20: return new MessagePack.Formatters.Ulf.SnapUnitStructFormatter();
                case 21: return new MessagePack.Formatters.Ulf.StandActionFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{

    public sealed class ElementTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ElementType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::ElementType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::ElementType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::ElementType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.MsgPck
{
    public sealed class IUnionMsgFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MsgPck.IUnionMsg>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public IUnionMsgFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(5, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::MsgPck.SnapSceneStruct).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::MsgPck.PlayerData).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
                { typeof(global::MsgPck.ActionData).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(2, 2) },
                { typeof(global::Ulf.SnapPlayerStruct).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(3, 3) },
                { typeof(global::MsgPck.RequestPlayerSpawn).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(4, 4) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(5)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MsgPck.IUnionMsg value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MsgPck.SnapSceneStruct>(options.Resolver).Serialize(ref writer, (global::MsgPck.SnapSceneStruct)value, options);
                        break;
                    case 1:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MsgPck.PlayerData>(options.Resolver).Serialize(ref writer, (global::MsgPck.PlayerData)value, options);
                        break;
                    case 2:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MsgPck.ActionData>(options.Resolver).Serialize(ref writer, (global::MsgPck.ActionData)value, options);
                        break;
                    case 3:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.SnapPlayerStruct>(options.Resolver).Serialize(ref writer, (global::Ulf.SnapPlayerStruct)value, options);
                        break;
                    case 4:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MsgPck.RequestPlayerSpawn>(options.Resolver).Serialize(ref writer, (global::MsgPck.RequestPlayerSpawn)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::MsgPck.IUnionMsg Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::MsgPck.IUnionMsg");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::MsgPck.IUnionMsg result = null;
            switch (key)
            {
                case 0:
                    result = (global::MsgPck.IUnionMsg)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MsgPck.SnapSceneStruct>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::MsgPck.IUnionMsg)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MsgPck.PlayerData>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::MsgPck.IUnionMsg)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MsgPck.ActionData>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::MsgPck.IUnionMsg)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.SnapPlayerStruct>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::MsgPck.IUnionMsg)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::MsgPck.RequestPlayerSpawn>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Ulf
{
    public sealed class INextActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Ulf.INextAction>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public INextActionFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(1, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Ulf.MovementAction).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(1)
            {
                { 0, 0 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Ulf.INextAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.MovementAction>(options.Resolver).Serialize(ref writer, (global::Ulf.MovementAction)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Ulf.INextAction Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Ulf.INextAction");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Ulf.INextAction result = null;
            switch (key)
            {
                case 0:
                    result = (global::Ulf.INextAction)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.MovementAction>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.MsgPck
{
    public sealed class ActionDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MsgPck.ActionData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MsgPck.ActionData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.guid);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.INextAction>(formatterResolver).Serialize(ref writer, value.action, options);
            writer.Write(value.isPlayerAction);
        }

        public global::MsgPck.ActionData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::MsgPck.ActionData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.guid = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.action = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.INextAction>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.isPlayerAction = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MsgPck.PlayerData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MsgPck.PlayerData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.playerId, options);
            writer.Write(value.isReady);
        }

        public global::MsgPck.PlayerData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::MsgPck.PlayerData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.playerId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.isReady = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RequestPlayerSpawnFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MsgPck.RequestPlayerSpawn>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MsgPck.RequestPlayerSpawn value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(0);
        }

        public global::MsgPck.RequestPlayerSpawn Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            reader.Skip();
            return new global::MsgPck.RequestPlayerSpawn();
        }
    }

    public sealed class SnapSceneStructFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MsgPck.SnapSceneStruct>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MsgPck.SnapSceneStruct value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.totalCount);
            writer.Write(value.currentCount);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.SnapPlanetStruct>(formatterResolver).Serialize(ref writer, value.snapPlanet, options);
        }

        public global::MsgPck.SnapSceneStruct Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::MsgPck.SnapSceneStruct();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.totalCount = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.currentCount = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.snapPlanet = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.SnapPlanetStruct>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Ulf
{
    public sealed class CreateBridgeStructFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Ulf.CreateBridgeStruct>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Ulf.CreateBridgeStruct value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(4);
            writer.Write(value.angleStart);
            writer.Write(value.mirrorLeft);
            writer.Write(value.startPlanetId);
            writer.Write(value.endPlanetId);
        }

        public global::Ulf.CreateBridgeStruct Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Ulf.CreateBridgeStruct();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.angleStart = reader.ReadSingle();
                        break;
                    case 1:
                        ____result.mirrorLeft = reader.ReadBoolean();
                        break;
                    case 2:
                        ____result.startPlanetId = reader.ReadInt32();
                        break;
                    case 3:
                        ____result.endPlanetId = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateBuildStructFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Ulf.CreateBuildStruct>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Ulf.CreateBuildStruct value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.View, options);
            writer.Write(value.Guid);
            writer.Write(value.Angle);
        }

        public global::Ulf.CreateBuildStruct Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Ulf.CreateBuildStruct();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.View = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Guid = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.Angle = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreatePlanetStructFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Ulf.CreatePlanetStruct>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Ulf.CreatePlanetStruct value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.planetId);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreateUnitStruct[]>(formatterResolver).Serialize(ref writer, value.createUnits, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::ElementType>(formatterResolver).Serialize(ref writer, value.ElementType, options);
            writer.Write(value.planetSize);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Vector2>(formatterResolver).Serialize(ref writer, value.planetPos, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreateBridgeStruct[]>(formatterResolver).Serialize(ref writer, value.bridges, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreateBuildStruct[]>(formatterResolver).Serialize(ref writer, value.builds, options);
        }

        public global::Ulf.CreatePlanetStruct Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Ulf.CreatePlanetStruct();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.planetId = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.createUnits = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreateUnitStruct[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.ElementType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::ElementType>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.planetSize = reader.ReadSingle();
                        break;
                    case 4:
                        ____result.planetPos = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::UnityEngine.Vector2>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.bridges = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreateBridgeStruct[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.builds = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreateBuildStruct[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateSceneStructFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Ulf.CreateSceneStruct>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Ulf.CreateSceneStruct value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreatePlanetStruct[]>(formatterResolver).Serialize(ref writer, value.planets, options);
        }

        public global::Ulf.CreateSceneStruct Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Ulf.CreateSceneStruct();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.planets = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreatePlanetStruct[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateUnitStructFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Ulf.CreateUnitStruct>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Ulf.CreateUnitStruct value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.View, options);
            writer.Write(value.Guid);
            writer.Write(value.Health);
        }

        public global::Ulf.CreateUnitStruct Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Ulf.CreateUnitStruct();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.View = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Guid = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.Health = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MovementActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Ulf.MovementAction>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Ulf.MovementAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.direction);
            writer.Write(value.fromAngle);
        }

        public global::Ulf.MovementAction Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Ulf.MovementAction();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.direction = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.fromAngle = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SnapPlanetStructFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Ulf.SnapPlanetStruct>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Ulf.SnapPlanetStruct value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreatePlanetStruct>(formatterResolver).Serialize(ref writer, value.createPlanet, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.SnapUnitStruct[]>(formatterResolver).Serialize(ref writer, value.snapUnits, options);
        }

        public global::Ulf.SnapPlanetStruct Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Ulf.SnapPlanetStruct();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.createPlanet = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreatePlanetStruct>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.snapUnits = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.SnapUnitStruct[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SnapPlayerStructFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Ulf.SnapPlayerStruct>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Ulf.SnapPlayerStruct value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.SnapUnitStruct>(formatterResolver).Serialize(ref writer, value.snapUnitStruct, options);
            writer.Write(value.planetId);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.playerId, options);
        }

        public global::Ulf.SnapPlayerStruct Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Ulf.SnapPlayerStruct();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.snapUnitStruct = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.SnapUnitStruct>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.planetId = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.playerId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SnapUnitStructFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Ulf.SnapUnitStruct>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Ulf.SnapUnitStruct value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreateUnitStruct>(formatterResolver).Serialize(ref writer, value.createUnit, options);
            writer.Write(value.angle);
            writer.Write(value.health);
        }

        public global::Ulf.SnapUnitStruct Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Ulf.SnapUnitStruct();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.createUnit = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Ulf.CreateUnitStruct>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.angle = reader.ReadSingle();
                        break;
                    case 2:
                        ____result.health = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StandActionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Ulf.StandAction>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Ulf.StandAction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.degree);
            writer.Write(value.roundId);
        }

        public global::Ulf.StandAction Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Ulf.StandAction();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.degree = reader.ReadSingle();
                        break;
                    case 1:
                        ____result.roundId = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

